name: License Check
description: Fuzzy license matching with GPL exclusion
runs:
  using: composite
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install PyGithub python-Levenshtein

    - name: Fuzzy License Check
      shell: python
      env:
        ORG_TOKEN: ${{ secrets.ORG_TOKEN }}
        ENABLED_REPOS: ${{ vars.ENABLED_REPOS || '[]' }}
        EXCLUDED_REPOS: ${{ vars.EXCLUDED_REPOS || '[]' }}
        CURRENT_REPO: ${{ github.repository }}
      run: |
        import os
        import re
        import json
        from difflib import SequenceMatcher
        from github import Github, GithubException

        # Check if the repository is enabled or excluded
        enabled_repos = json.loads(os.environ['ENABLED_REPOS'])
        excluded_repos = json.loads(os.environ['EXCLUDED_REPOS'])
        current_repo = os.environ['CURRENT_REPO']

        if enabled_repos and current_repo not in enabled_repos:
            print(f"Skipping repository {current_repo} (not in enabled list)")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                fh.write('license_status=skipped')
            exit(0)

        if current_repo in excluded_repos:
            print(f"Skipping repository {current_repo} (excluded)")
            with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                fh.write('license_status=skipped')
            exit(0)

        # Configuration
        EXCLUDED_KEYWORDS = {
            'gpl', 'gnu', 'general', 'public', 'version', '2', '3',
            'agpl', 'lgpl', 'lesser', 'copying', 'affero', 'copyleft',
            'copyright', 'foundation', 'franklin', 'street', 'patent'
        }
        SIMILARITY_THRESHOLD = 0.75

        g = Github(os.environ['ORG_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])

        # Load permitted licenses
        org_repo = repo.organization.get_repo(".github")
        licenses_file = org_repo.get_contents("permissive_licenses.json")
        permitted_licenses = json.loads(licenses_file.decoded_content)['permissive']

        # Get license file content
        license_text = ""
        try:
            for f in repo.get_contents(""):
                if f.name.lower().startswith(('license', 'copying')):
                    license_text = f.decoded_content.decode().lower()
                    break
        except GithubException:
            pass

        # Preprocess text
        if license_text:
            lines = license_text.split('\n')[:20]
            clean_text = ' '.join([
                word for line in lines 
                for word in re.findall(r'\w+', line) 
                if word not in EXCLUDED_KEYWORDS
            ])

            # Generate candidate phrases
            candidates = re.findall(r'\w+', clean_text)
            phrases = [' '.join(candidates[i:i+3]) for i in range(len(candidates)-2)]
            all_candidates = set(candidates + phrases)

            # Fuzzy match against permitted licenses
            is_permissive = False
            for license_name in permitted_licenses:
                license_lower = license_name.lower()
                for candidate in all_candidates:
                    ratio = SequenceMatcher(None, candidate, license_lower).ratio()
                    if ratio >= SIMILARITY_THRESHOLD:
                        is_permissive = True
                        break
                if is_permissive:
                    break
        else:
            # No license file found
            is_permissive = False

        # Set output
        print(f"license_status={'permissive' if is_permissive else 'non-permissive'}")
        with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            fh.write(f'license_status={"permissive" if is_permissive else "non-permissive"}')
            

