name: License Compliance & CLA Gate

on:
  # CLA gate still needs pull_request_target + issue_comment
  pull_request_target:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created]
  # License check runs in an unprivileged job on plain pull_request
  pull_request:
    types: [opened, reopened, synchronize]

# Keep top-level perms minimal; set per-job below
permissions: {}

jobs:
  # ---------------------------
  # 1) CLA gate (privileged)
  # ---------------------------
  cla-gate:
    # Run on PR_TARGET or CLA-related comments
    if: |
      github.event_name == 'pull_request_target' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       (
         github.event.comment.body == 'recheck' ||
         github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA'
       )
      )
    runs-on: ubuntu-latest

    # CLA job needs to write comments/statuses, but MUST NOT checkout PR code
    permissions:
      contents: read
      pull-requests: write
      statuses: write

    steps:
      - name: Debug Event Payload (CLA gate)
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Repo:  ${{ github.repository }}"
          echo "Enabled Repos: ${{ vars.ENABLED_REPOS }}"
          echo "Excluded Repos: ${{ vars.EXCLUDED_REPOS }}"

      - name: Check if repository is enabled or excluded
        id: repo_filter
        shell: python
        env:
          ENABLED_REPOS: ${{ vars.ENABLED_REPOS || '[]' }}
          EXCLUDED_REPOS: ${{ vars.EXCLUDED_REPOS || '[]' }}
          CURRENT_REPO: ${{ github.repository }}
        run: |
          import os, json
          enabled = json.loads(os.environ['ENABLED_REPOS'])
          excluded = json.loads(os.environ['EXCLUDED_REPOS'])
          current = os.environ['CURRENT_REPO']
          def set_out(v):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh: fh.write(f"should_run={v}")
          if enabled and current not in enabled:
              print(f"⚠️ Skipping {current} - not in enabled list"); set_out("false"); raise SystemExit(0)
          if current in excluded:
              print(f"⚠️ Skipping {current} - in excluded list"); set_out("false"); raise SystemExit(0)
          print(f"✅ Running CLA for {current}"); set_out("true")

      # ❗️No checkout of PR code here.

      # Use your CLA assistant exactly as before (works via API)
      - name: Enforce CLA
        if: steps.repo_filter.outputs.should_run == 'true'
        uses: contributor-assistant/github-action@v2.6.1
        env:
          # GITHUB_TOKEN is fine here; job has statuses/pull-requests write
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path-to-signatures: 'signatures/version1/${{ github.repository }}/cla.json'
          path-to-document: 'https://${{ github.repository_owner }}.github.io/cla-docs/GenericCLA.html'
          branch: 'main'
          allowlist: 'org-admin,bot*'
          # Optional inputs (uncomment and customize as needed)
          # remote-organization-name: 'your-remote-org'
          # remote-repository-name: 'your-remote-repo'
          # create-file-commit-message: 'Creating file for storing CLA Signatures'
          # signed-commit-message: '$contributorName has signed the CLA in $owner/$repo#$pullRequestNo'
          # custom-notsigned-prcomment: 'Please sign the CLA to contribute.'
          # custom-pr-sign-comment: 'I have read the CLA Document and I hereby sign the CLA'
          # custom-allsigned-prcomment: 'All contributors have signed the CLA.'
          # lock-pullrequest-aftermerge: false
          # use-dco-flag: false
          # If you previously relied on a custom sign phrase/comment,
          # keep the same optional inputs as needed.

  # ------------------------------------------
  # 2) License check (UNprivileged, read-only)
  # ------------------------------------------
  license-check:
    # Runs only for 'pull_request'; never in the privileged PR_TARGET job
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    # Read-only permissions while inspecting untrusted code
    permissions:
      contents: read
      actions: read

    steps:
      - name: Debug Event Payload (license)
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Repo:  ${{ github.repository }}"

      - name: Check if repository is enabled or excluded
        id: repo_filter
        shell: python
        env:
          ENABLED_REPOS: ${{ vars.ENABLED_REPOS || '[]' }}
          EXCLUDED_REPOS: ${{ vars.EXCLUDED_REPOS || '[]' }}
          CURRENT_REPO: ${{ github.repository }}
        run: |
          import os, json
          enabled = json.loads(os.environ['ENABLED_REPOS'])
          excluded = json.loads(os.environ['EXCLUDED_REPOS'])
          current = os.environ['CURRENT_REPO']
          def set_out(v):
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh: fh.write(f"should_run={v}")
          if enabled and current not in enabled:
              print(f"⚠️ Skipping {current} - not in enabled list"); set_out("false"); raise SystemExit(0)
          if current in excluded:
              print(f"⚠️ Skipping {current} - in excluded list"); set_out("false"); raise SystemExit(0)
          print(f"✅ Running license check for {current}"); set_out("true")

      # Safe checkout of PR HEAD with no persisted creds
      - name: Checkout PR head (read-only, no creds)
        if: steps.repo_filter.outputs.should_run == 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 1
          persist-credentials: false
          clean: true

      # Your local action runs against the checked out tree;
      # this job has only read permissions.
      - name: Fuzzy License Validation
        if: steps.repo_filter.outputs.should_run == 'true'
        id: license_check
        uses: ./.github/actions/check-license
