name: License Compliance & CLA Gate

on:
  pull_request_target:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write

jobs:
  license-check:
    # Add condition to run on PR events or specific comment triggers
    if: |
      github.event_name == 'pull_request_target' || 
      (github.event_name == 'issue_comment' && 
       github.event.issue.pull_request && 
       (github.event.comment.body == 'recheck' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA'))
    runs-on: ubuntu-latest
    steps:
      - name: Check if repository is enabled or excluded
        id: repo_filter
        shell: python
        env:
          ENABLED_REPOS: ${{ vars.ENABLED_REPOS || '[]' }}
          EXCLUDED_REPOS: ${{ vars.EXCLUDED_REPOS || '[]' }}
          CURRENT_REPO: ${{ github.repository }}
        run: |
          import os
          import json

          enabled_repos = json.loads(os.environ['ENABLED_REPOS'])
          excluded_repos = json.loads(os.environ['EXCLUDED_REPOS'])
          current_repo = os.environ['CURRENT_REPO']

          # If enabled_repos is specified, only run for those repos
          if enabled_repos:
              if current_repo not in enabled_repos:
                  print(f"Skipping repository {current_repo} (not in enabled list)")
                  with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                      fh.write('should_run=false')
                  exit(0)

          # If excluded_repos is specified, skip those repos
          if current_repo in excluded_repos:
              print(f"Skipping repository {current_repo} (excluded)")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  fh.write('should_run=false')
              exit(0)

          # Otherwise, run the job
          print(f"Running for repository {current_repo}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write('should_run=true')

      # Get PR SHA based on event type
      - name: Get PR SHA
        id: pr_sha
        if: steps.repo_filter.outputs.should_run == 'true'
        shell: python
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          PR_NUMBER: ${{ github.event.issue.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          import os
          import json
          from github import Github

          event_name = os.environ['EVENT_NAME']
          if event_name == 'pull_request_target':
              sha = os.environ['PR_HEAD_SHA']
          else:  # issue_comment
              g = Github(os.environ['GITHUB_TOKEN'])
              repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
              pr = repo.get_pull(int(os.environ['PR_NUMBER']))
              sha = pr.head.sha

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f'sha={sha}')

      - name: Checkout PR Head
        if: steps.repo_filter.outputs.should_run == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_sha.outputs.sha }}
          fetch-depth: 0

      - name: Fuzzy License Validation
        if: steps.repo_filter.outputs.should_run == 'true'
        id: license_check
        uses: ./.github/actions/check-license

      - name: Enforce CLA
        if: steps.license_check.outputs.license_status == 'non-permissive' && steps.repo_filter.outputs.should_run == 'true'
        uses: contributor-assistant/github-action@v2.6.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # Uncomment if using a remote repository for signatures
        with:
          path-to-signatures: 'signatures/version1/${{ github.repository_owner }}/cla.json'
          path-to-document: 'https://${{ github.repository_owner }}.github.io/cla-docs/GenericCLA.html'
          branch: 'main'
          allowlist: 'org-admin,bot*'
          # Optional inputs (uncomment and customize as needed)
          # remote-organization-name: 'your-remote-org'
          # remote-repository-name: 'your-remote-repo'
          # create-file-commit-message: 'Creating file for storing CLA Signatures'
          # signed-commit-message: '$contributorName has signed the CLA in $owner/$repo#$pullRequestNo'
          # custom-notsigned-prcomment: 'Please sign the CLA to contribute.'
          # custom-pr-sign-comment: 'I have read the CLA Document and I hereby sign the CLA'
          # custom-allsigned-prcomment: 'All contributors have signed the CLA.'
          # lock-pullrequest-aftermerge: false
          # use-dco-flag: false
