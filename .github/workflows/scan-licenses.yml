name: Organization Public License Scan

on:
  workflow_dispatch:
    inputs:
      organization:
        description: 'GitHub organization name (e.g., "my-org")'
        required: true
        type: string
      github_token:
        description: 'Optional GitHub PAT. If empty for a manual run, secrets.GITHUB_TOKEN will be used.'
        required: false
        type: string
      output_filename:
        description: 'Name of the output JSON file'
        required: false
        default: 'organization_public_licenses.json'
        type: string
  schedule:
    # Example: Run every Monday at 2 AM UTC
    - cron: '0 2 * * 1'

jobs:
  scan_licenses:
    runs-on: ubuntu-latest
    permissions:
      contents: read # For checkout

    steps:
      - name: Checkout code (optional)
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Install licensee
        run: gem install licensee

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install/Ensure GitHub CLI
        run: |
          if ! type -p gh &>/dev/null; then
            echo "GitHub CLI not found, installing..."
            sudo apt-get update
            sudo apt-get install -y curl
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install -y gh
          else
            echo "GitHub CLI already installed."
          fi
          gh --version

      - name: Prepare environment variables
        id: prep_env
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            if [ -z "${{ secrets.ORG_NAME_FOR_SCAN }}" ]; then
              echo "Error: ORG_NAME_FOR_SCAN secret is not set for scheduled run."
              exit 1
            fi
            echo "ORGANIZATION_TO_SCAN=${{ secrets.ORG_NAME_FOR_SCAN }}" >> $GITHUB_ENV
            echo "GH_TOKEN_FOR_SCAN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
            echo "OUTPUT_FILENAME_TO_USE=organization_public_licenses_scheduled.json" >> $GITHUB_ENV
            echo "Scheduled run: Using secrets.ORG_NAME_FOR_SCAN and secrets.GITHUB_TOKEN."
          else # workflow_dispatch
            if [ -z "${{ github.event.inputs.organization }}" ]; then
              echo "Error: 'organization' input is not set for manual run."
              exit 1
            fi
            echo "ORGANIZATION_TO_SCAN=${{ github.event.inputs.organization }}" >> $GITHUB_ENV
            
            if [ -n "${{ github.event.inputs.github_token }}" ]; then
              echo "Manual run: Using provided github_token input."
              echo "GH_TOKEN_FOR_SCAN=${{ github.event.inputs.github_token }}" >> $GITHUB_ENV
            else
              echo "Manual run: github_token input is empty. Using secrets.GITHUB_TOKEN as fallback."
              echo "GH_TOKEN_FOR_SCAN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
            fi
            echo "OUTPUT_FILENAME_TO_USE=${{ github.event.inputs.output_filename }}" >> $GITHUB_ENV
            echo "Manual run: Using inputs for organization and output_filename."
          fi
          # Mask the token value if it's set and passed to the script via GH_TOKEN_FOR_SCAN
          # Note: $GITHUB_ENV variables are automatically masked if they look like secrets.
          # This explicit masking is for the variable if it were used directly in `run` scripts.
          # For GH_TOKEN_FOR_SCAN being put into GITHUB_ENV, it should be auto-masked by Actions.
          # However, if we were to echo it directly:
          # TOKEN_VALUE_TO_MASK=$(echo "$GH_TOKEN_FOR_SCAN" | sed 's/./*/g') # Example of how you might get it
          # echo "::add-mask::${TOKEN_VALUE_TO_MASK}" # This isn't quite right as we don't have it here directly
          # The best way is to rely on Actions auto-masking for values from secrets and GITHUB_ENV.
          # If GH_TOKEN_FOR_SCAN is set, it will be used by the next step.
          echo "Token for scan will be (masked if secret): $GH_TOKEN_FOR_SCAN"


      - name: Authenticate GitHub CLI and Git
        env:
          GH_TOKEN: ${{ env.GH_TOKEN_FOR_SCAN }} # This correctly picks up from GITHUB_ENV
        run: |
          if [ -z "$ORGANIZATION_TO_SCAN" ]; then
            echo "Error: Organization name (ORGANIZATION_TO_SCAN) is not available."
            exit 1
          fi

          if [ -n "$GH_TOKEN" ]; then
            echo "Authenticating GitHub CLI and Git with the determined token."
            echo "$GH_TOKEN" | gh auth login --with-token
            gh auth setup-git
          else
            echo "Warning: No GitHub token available (GH_TOKEN is empty). Proceeding with unauthenticated access (lowest rate limits)."
            git config --global credential.helper ''
          fi

      - name: Scan public repositories and generate report
        run: |
          set -e
          set -o pipefail

          echo "Scanning public repositories in organization: $ORGANIZATION_TO_SCAN"
          echo "Output file will be: $OUTPUT_FILENAME_TO_USE"

          TEMP_LICENSE_FILE="license_lines.temp.jsonl"
          FINAL_OUTPUT_FILE="$OUTPUT_FILENAME_TO_USE"
          > "$TEMP_LICENSE_FILE"

          echo "Fetching public repository list for $ORGANIZATION_TO_SCAN..."
          repo_names_json=$(gh repo list "$ORGANIZATION_TO_SCAN" --visibility public --limit 2000 --json name --jq '.[].name')

          if [ -z "$repo_names_json" ]; then
            echo "No public repositories found in organization $ORGANIZATION_TO_SCAN or failed to list them."
            echo "[]" > "$FINAL_OUTPUT_FILE"
            echo "Workflow finished: No public repositories to scan."
            exit 0
          fi

          MAX_RETRIES=3
          RETRY_DELAY_SECONDS=10
          mapfile -t repo_array < <(echo "$repo_names_json")

          for repo_name in "${repo_array[@]}"; do
            if [ -z "$repo_name" ]; then
              continue
            fi

            repo_full_name="$ORGANIZATION_TO_SCAN/$repo_name"
            echo "-----------------------------------------------------"
            echo "Processing repository: $repo_full_name"
            CLONE_DIR=$(mktemp -d -t "repo_${repo_name//\//_}_XXXXXX")
            echo "Cloning to temporary directory: $CLONE_DIR"
            current_attempt=1
            license_id="ERROR_PROCESSING"

            while [ $current_attempt -le $MAX_RETRIES ]; do
              echo "Attempt $current_attempt/$MAX_RETRIES to clone and analyze $repo_full_name..."
              if GIT_TERMINAL_PROMPT=0 git clone --depth 1 --quiet "https://github.com/$repo_full_name.git" "$CLONE_DIR"; then
                echo "Clone successful."
                cd "$CLONE_DIR"
                license_output=$(licensee detect --json . 2>/dev/null || echo "LICENSEE_CLI_ERROR")
                cd ..

                if [[ "$license_output" == "LICENSEE_CLI_ERROR" ]]; then
                    license_id="LICENSEE_CLI_ERROR"
                    echo "Licensee CLI failed for $repo_full_name."
                elif [[ "$license_output" == "null" ]] || [[ -z "$license_output" ]]; then
                    license_id="NONE_FOUND"
                    echo "No license found by licensee in $repo_full_name."
                else
                    license_id_raw=$(echo "$license_output" | jq -r '.matched_license.spdx_id // .matched_license.name // "UNKNOWN_OR_NO_MATCH"')
                    # JQ's // operator already handles null, so extra check for "null" string is less critical but fine
                    if [[ "$license_id_raw" == "null" ]] || [[ -z "$license_id_raw" ]] || [[ "$license_id_raw" == "UNKNOWN_OR_NO_MATCH" && "$license_output" != *"UNKNOWN_OR_NO_MATCH"* ]]; then
                        license_id="UNKNOWN_OR_NO_MATCH" # Ensure this if jq itself returned the fallback literal
                        echo "Licensee ran, but license SPDX ID or name was effectively null/empty in $repo_full_name."
                    else
                        license_id="$license_id_raw"
                        echo "License found for $repo_full_name: $license_id"
                    fi
                fi
                break
              else
                echo "Clone failed for $repo_full_name (attempt $current_attempt)."
                if [ $current_attempt -lt $MAX_RETRIES ]; then
                  echo "Retrying in $RETRY_DELAY_SECONDS seconds..."
                  sleep $RETRY_DELAY_SECONDS
                else
                  echo "Max retries reached for $repo_full_name. Marking as clone error."
                  license_id="ERROR_CLONING"
                fi
              fi
              current_attempt=$((current_attempt + 1))
            done
            jq -n --arg repo_name "$repo_name" --arg license_id "$license_id" \
              '{ "repository_name": $repo_name, "license": $license_id }' >> "$TEMP_LICENSE_FILE"
            rm -rf "$CLONE_DIR"
            echo "Cleaned up $CLONE_DIR."
          done

          if [ -s "$TEMP_LICENSE_FILE" ]; then
            jq -s '.' "$TEMP_LICENSE_FILE" > "$FINAL_OUTPUT_FILE"
          else
            echo "[]" > "$FINAL_OUTPUT_FILE"
          fi
          rm "$TEMP_LICENSE_FILE"

          echo "-----------------------------------------------------"
          echo "Public license report generated: $FINAL_OUTPUT_FILE"
          echo "Content of $FINAL_OUTPUT_FILE:"
          cat "$FINAL_OUTPUT_FILE"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: public-license-report
          path: ${{ env.OUTPUT_FILENAME_TO_USE }}
