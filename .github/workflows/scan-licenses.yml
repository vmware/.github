name: Scan Organization Repos for Licenses

on:
  workflow_dispatch:
    inputs:
      organization_name:
        description: 'GitHub Organization Name to scan'
        required: true
        default: ${{ github.event.repository.owner.login }}
      max_clone_retries:
        description: 'Max retries for git clone operations'
        required: false
        default: '5'
      clone_retry_delay_seconds:
        description: 'Delay between clone retries (seconds)'
        required: false
        default: '10'

jobs:
  license_scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for actions/checkout and for the GITHUB_TOKEN to clone *this* repository
      # If scanning private repositories in the organization, the default GITHUB_TOKEN's
      # permissions might be sufficient *if* the workflow is run from within the organization
      # and the token has organization-level read access (which is not a direct 'permission'
      # you grant here, but rather a property of the token itself).
      # For robust access to ALL private repos in an organization,
      # you might need a Personal Access Token (PAT) with 'read:org' and 'repo' scopes
      # stored as a repository secret (e.g., secrets.ORG_PAT) and used instead of GITHUB_TOKEN.
      # Example for PAT:
      # env:
      #   GH_TOKEN_FOR_CLI: ${{ secrets.ORG_PAT }}
      #   GITHUB_TOKEN: ${{ secrets.ORG_PAT }} # For git clone
      # pull-requests: write # Not strictly needed for this workflow unless you're modifying PRs
                            # Kept from previous response for completeness if you needed it,
                            # but can be removed for this specific license scanning purpose.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js (for licensee)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install licensee
        run: npm install -g licensee

      - name: Set up GitHub CLI
        run: |
          # Configure gh CLI to use the default GITHUB_TOKEN for API calls (like gh repo list)
          echo "GH_TOKEN_FOR_CLI=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          gh auth setup-git

      - name: Scan Organization Repositories
        id: scan
        env:
          ORG_NAME: ${{ github.event.inputs.organization_name }}
          MAX_RETRIES: ${{ github.event.inputs.max_clone_retries }}
          RETRY_DELAY: ${{ github.event.inputs.clone_retry_delay_seconds }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Used here explicitly for cloning private repos
          # If using a PAT:
          # GITHUB_TOKEN: ${{ secrets.ORG_PAT }}
        run: |
          set -euo pipefail

          SCAN_RESULTS_FILE="license_scan_results.json"
          TEMP_JSONL_FILE="temp_results.jsonl"
          CLONE_DIR="temp_clones"

          echo "Starting license scan for organization: $ORG_NAME"
          mkdir -p "$CLONE_DIR"

          > "$TEMP_JSONL_FILE"

          echo "Fetching repository list for $ORG_NAME..."
          # gh repo list uses the GITHUB_TOKEN (via GH_TOKEN_FOR_CLI) to authenticate
          REPO_LIST_JSON=$(gh repo list "$ORG_NAME" --json name,url --limit 9999 || { echo "Failed to fetch repository list. Check ORG_NAME and GITHUB_TOKEN permissions/scope."; exit 1; })

          echo "$REPO_LIST_JSON" | jq -c '.[]' | while IFS= read -r repo_json; do
              REPO_NAME=$(echo "$repo_json" | jq -r '.name')
              REPO_URL=$(echo "$repo_json" | jq -r '.url')
              REPO_DIR="$CLONE_DIR/$REPO_NAME"

              echo "--- Processing repository: $REPO_NAME ---"
              DETECTED_LICENSE="Not Detected"

              CLONE_SUCCESS=false
              for i in $(seq 1 "$MAX_RETRIES"); do
                  echo "Attempt $i/$MAX_RETRIES to clone $REPO_NAME..."
                  # Use the GITHUB_TOKEN (or PAT) directly in the URL for cloning private repos
                  if git clone --depth 1 "https://oauth2:$GITHUB_TOKEN@github.com/$ORG_NAME/$REPO_NAME.git" "$REPO_DIR" &> /dev/null; then
                      CLONE_SUCCESS=true
                      echo "Successfully cloned $REPO_NAME"
                      break
                  else
                      echo "Failed to clone $REPO_NAME. Retrying in $RETRY_DELAY seconds..."
                      sleep "$RETRY_DELAY"
                  fi
              done

              if [ "$CLONE_SUCCESS" = "true" ]; then
                  pushd "$REPO_DIR" > /dev/null
                  LICENSEE_OUTPUT=$(licensee detect --json . || true)
                  popd > /dev/null

                  if echo "$LICENSEE_OUTPUT" | jq -e '.license.spdx_id' &> /dev/null; then
                      DETECTED_LICENSE=$(echo "$LICENSEE_OUTPUT" | jq -r '.license.spdx_id')
                      echo "License detected for $REPO_NAME: $DETECTED_LICENSE"
                  elif echo "$LICENSEE_OUTPUT" | jq -e '.licenses[0].spdx_id' &> /dev/null; then
                      DETECTED_LICENSE=$(echo "$LICENSEE_OUTPUT" | jq -r '.licenses[0].spdx_id')
                      echo "License detected for $REPO_NAME (first of many): $DETECTED_LICENSE"
                  else
                      echo "No clear SPDX license detected for $REPO_NAME."
                  fi
              else
                  DETECTED_LICENSE="Clone Failed After $MAX_RETRIES Retries"
                  echo "Failed to clone $REPO_NAME after multiple attempts."
              fi

              jq -n \
                --arg name "$REPO_NAME" \
                --arg license "$DETECTED_LICENSE" \
                '{ "repository name": $name, "license": $license }' >> "$TEMP_JSONL_FILE"

              rm -rf "$REPO_DIR"
          done

          echo "All repositories processed. Compiling final JSON output."
          jq -s '.' "$TEMP_JSONL_FILE" > "$SCAN_RESULTS_FILE"

          echo "Scan complete. Results saved to $SCAN_RESULTS_FILE"
          cat "$SCAN_RESULTS_FILE"

      - name: Upload License Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: license-scan-results
          path: license_scan_results.json
          retention-days: 7
