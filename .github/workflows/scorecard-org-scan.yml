name: Org-wide / Targeted Scorecard Scan (native, pinned)

on:
  schedule:
    - cron: "0 7 * * 1"   # Mondays 07:00 UTC
  workflow_dispatch:
    inputs:
      mode:
        description: "org | repo | repos | file"
        type: choice
        options: [org, repo, repos, file]
        default: org
      org:
        description: "GitHub org (required for org mode or to resolve bare repo names)"
        type: string
        required: false
      target:
        description: "For repo: owner/name (or bare if org set). For repos: comma-separated list."
        type: string
        required: false
      file:
        description: "For file mode: path to repos file (in this repo)"
        type: string
        required: false
      concurrency:
        description: "Parallel workers"
        type: string
        default: "8"
      threshold:
        description: "Warn threshold"
        type: string
        default: "7.0"
      script_flags:
        description: "Extra script flags (space-separated)"
        type: string
        default: "--mode native"     # force native mode by default
      extra_args:
        description: "Extra args for Scorecard CLI (e.g., --enable=Binary-Artifacts)"
        type: string
        default: ""
      publish_pages:
        description: "Publish dashboard (out/) to GitHub Pages"
        type: choice
        options: ["false","true"]
        default: "false"

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout .github repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install Scorecard CLI (native, pinned)
      - name: Install Scorecard CLI (native, pinned)
        shell: bash
        run: |
          set -euo pipefail

          VERSION="v5.2.1"               # <-- pin the Scorecard release here
          VER_NUM="${VERSION#v}"         # "5.2.1"

          OS="linux"
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64)  ARCH="amd64" ;;
            aarch64) ARCH="arm64" ;;
            arm64)   ARCH="arm64" ;;
            *) echo "Unsupported arch: $ARCH"; exit 1 ;;
          esac

          ASSET="scorecard_${VER_NUM}_${OS}_${ARCH}.tar.gz"
          URL="https://github.com/ossf/scorecard/releases/download/${VERSION}/${ASSET}"

          echo "Downloading $URL"
          curl -fL --retry 5 --retry-delay 3 -o "/tmp/${ASSET}" "$URL"

          tar -xzf "/tmp/${ASSET}" -C /tmp
          chmod +x /tmp/scorecard
          sudo mv /tmp/scorecard /usr/local/bin/scorecard

          scorecard --version

      - name: Install Python deps
        run: pip install requests

      - name: Build args
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR="out"; mkdir -p "$OUT_DIR"

          ARGS=(--out "$OUT_DIR" --concurrency "${{ inputs.concurrency }}" --threshold "${{ inputs.threshold }}" )

          [[ -n "${{ inputs.org }}" ]] && ARGS+=(--org "${{ inputs.org }}")

          case "${{ inputs.mode }}" in
            org) : ;;
            repo)
              [[ -n "${{ inputs.target }}" ]] || { echo "target is required for mode=repo"; exit 1; }
              ARGS+=(--repo "${{ inputs.target }}")
              ;;
            repos)
              [[ -n "${{ inputs.target }}" ]] || { echo "target is required for mode=repos"; exit 1; }
              ARGS+=(--repos "${{ inputs.target }}")
              ;;
            file)
              [[ -n "${{ inputs.file }}" ]] || { echo "file is required for mode=file"; exit 1; }
              [[ -f "${{ inputs.file }}" ]] || { echo "repos file not found at '${{ inputs.file }}'"; exit 1; }
              ARGS+=(--repos-file "${{ inputs.file }}")
              ;;
            *) echo "unknown mode"; exit 1;;
          esac

          # user-supplied script flags (defaults include --mode native)
          if [[ -n "${{ inputs.script_flags }}" ]]; then
            read -r -a SF_ARR <<< "${{ inputs.script_flags }}"
            ARGS+=("${SF_ARR[@]}")
          fi

          # Extra args passed to the Scorecard CLI itself
          if [[ -n "${{ inputs.extra_args }}" ]]; then
            ARGS+=(--extra-scorecard-args "${{ inputs.extra_args }}")
          fi

          printf '%s\0' "${ARGS[@]}" > args.z

      - name: Run scan (native)
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.SCORECARD_PAT }}
        run: |
          set -euo pipefail
          mapfile -d '' ARGS < args.z
          # Ensure native mode is used even if omitted from inputs
          python3 scripts/scorecard_org_scan.py --mode native "${ARGS[@]}"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scorecard-report
          path: out/

      - name: Upload Pages artifact (optional)
        if: ${{ inputs.publish_pages == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: out/

  deploy-pages:
    if: ${{ inputs.publish_pages == 'true' }}
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/deploy-pages@v4
