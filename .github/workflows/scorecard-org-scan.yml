# .github/workflows/scorecard-org-scan.yml
name: Org-wide / Targeted Scorecard Scan

on:
  schedule:
    - cron: "0 7 * * 1"   # Mondays 07:00 UTC
  workflow_dispatch:
    inputs:
      mode:
        description: "org | repo | repos | file"
        type: choice
        options: [org, repo, repos, file]
        default: org
      org:
        description: "GitHub org (required for org mode or to resolve bare repo names)"
        type: string
        required: false
      target:
        description: "For mode=repo: owner/name (or bare if org set). For mode=repos: comma-separated list."
        type: string
        required: false
      file:
        description: "For mode=file: path to repos file (checked into this repo)."
        type: string
        required: false
      concurrency:
        description: "Parallel workers"
        type: string
        default: "8"
      threshold:
        description: "Warn threshold"
        type: string
        default: "7.0"
      script_flags:
        description: "Extra flags for the Python script (e.g., --overwrite --include-archived --only-private --include-forks)"
        type: string
        default: ""
      extra_args:
        description: "Extra args for Scorecard CLI (e.g., --enable=Binary-Artifacts)"
        type: string
        default: ""
      publish_pages:
        description: "Publish dashboard (out/) to GitHub Pages"
        type: choice
        options: ["false","true"]
        default: "false"

permissions:
  contents: read
  actions: read
  pages: write     # only needed if publish_pages == true
  id-token: write  # only needed if publish_pages == true

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout .github repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Scorecard CLI
        run: |
          curl -sSfL https://raw.githubusercontent.com/ossf/scorecard/main/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: Install Python deps
        run: pip install requests

      - name: Build args
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR="out"; mkdir -p "$OUT_DIR"

          # Base args
          ARGS=(--out "$OUT_DIR" --mode native --concurrency "${{ inputs.concurrency }}" --threshold "${{ inputs.threshold }}")

          # Optional: org (helps resolve bare repo names and needed for org mode)
          [[ -n "${{ inputs.org }}" ]] && ARGS+=(--org "${{ inputs.org }}")

          case "${{ inputs.mode }}" in
            org)
              # All-org scan; additional toggles can go in script_flags
              ;;
            repo)
              [[ -n "${{ inputs.target }}" ]] || { echo "target is required for mode=repo"; exit 1; }
              ARGS+=(--repo "${{ inputs.target }}")
              ;;
            repos)
              [[ -n "${{ inputs.target }}" ]] || { echo "target is required for mode=repos"; exit 1; }
              ARGS+=(--repos "${{ inputs.target }}")
              ;;
            file)
              [[ -n "${{ inputs.file }}" ]] || { echo "file is required for mode=file"; exit 1; }
              [[ -f "${{ inputs.file }}" ]] || { echo "repos file not found at '${{ inputs.file }}'"; exit 1; }
              ARGS+=(--repos-file "${{ inputs.file }}")
              ;;
            *)
              echo "unknown mode: ${{ inputs.mode }}"; exit 1;;
          esac

          # Script flags (e.g., --overwrite --include-archived --only-private --include-forks)
          if [[ -n "${{ inputs.script_flags }}" ]]; then
            # shellsplit
            read -r -a SF_ARR <<< "${{ inputs.script_flags }}"
            ARGS+=("${SF_ARR[@]}")
          fi

          # Extra args passed through to Scorecard CLI itself
          if [[ -n "${{ inputs.extra_args }}" ]]; then
            ARGS+=(--extra-scorecard-args "${{ inputs.extra_args }}")
          fi

          printf '%s\0' "${ARGS[@]}" > args.z

      - name: Run scan
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.SCORECARD_PAT }}   # fine-grained PAT (read-only)
        run: |
          mapfile -d '' ARGS < args.z
          python3 scripts/scorecard_org_scan.py "${ARGS[@]}"

      - name: Upload report artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scorecard-report
          path: out/

      - name: Upload Pages artifact (optional)
        if: ${{ inputs.publish_pages == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: out/

  deploy-pages:
    if: ${{ inputs.publish_pages == 'true' }}
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/deploy-pages@v4
