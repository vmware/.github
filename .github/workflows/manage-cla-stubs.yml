# File: .github/.github/workflows/manage-cla-stubs.yml
# Purpose: Periodically manages CLA trigger stubs across organization repositories.
# Builds the licensee Docker image within each processing job.

name: Manage CLA Stubs Org-Wide

on:
  # schedule:
    # - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      specific_repos:
        description: 'Comma-separated list of specific repos (owner/repo1,owner/repo2) to process. Overrides INCLUDE/EXCLUDE.'
        required: false
        default: ''
      licensee_version_tag:
        description: 'Licensee git tag to build (e.g., v9.16.1). Default is v9.16.1.'
        required: false
        default: 'v9.16.1' # Pin to a known stable version of licensee

permissions: {}

env:
  EXCLUDE_REPOS_CSV: ${{ vars.EXCLUDE_REPOS || '.github' }}
  INCLUDE_REPOS_CSV: ${{ vars.INCLUDE_REPOS || '' }}
  PERMISSIVE_SPDX_IDS_CSV: ${{ vars.PERMISSIVE_SPDX_IDS || 'MIT,Apache-2.0,BSD-3-Clause,ISC,BSD-2-Clause,CC0-1.0,Unlicense' }}
  # Define the image tag to be used consistently
  LOCAL_LICENSEE_IMAGE_TAG: 'local-org-licensee:latest' # This tag will be built on each runner

jobs:
  discover_repositories:
    name: Discover Repositories
    runs-on: ubuntu-latest
    outputs:
      repositories_json: ${{ steps.get_repos.outputs.repo_list_json }}
      repository_count: ${{ steps.get_repos.outputs.repo_count }}
    steps:
      - name: Get Organization Repositories List
        id: get_repos
        uses: actions/github-script@v7.0.1
        env:
          INCLUDE_REPOS_CSV: ${{ env.INCLUDE_REPOS_CSV }}
          EXCLUDE_REPOS_CSV: ${{ env.EXCLUDE_REPOS_CSV }}
          SPECIFIC_REPOS_INPUT: ${{ github.event.inputs.specific_repos }}
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            // ... (JavaScript for discovery - same as before) ...
            const includeReposList = (process.env.INCLUDE_REPOS_CSV || "").split(',').map(r => r.trim()).filter(r => r);
            const excludeReposList = (process.env.EXCLUDE_REPOS_CSV || "").split(',').map(r => r.trim()).filter(r => r);
            const specificReposInput = (process.env.SPECIFIC_REPOS_INPUT || "").split(',').map(r => r.trim()).filter(r => r);
            let reposToProcess = [];

            if (specificReposInput.length > 0) {
              console.log("Processing only specifically provided repositories (from manual input):", specificReposInput);
              reposToProcess = specificReposInput.map(repoName => {
                if (repoName.includes('/')) return repoName;
                return `${context.repo.owner}/${repoName}`;
              });
            } else if (includeReposList.length > 0) {
              console.log("Processing only explicitly included repositories (from VARS_INCLUDE_REPOS):", includeReposList);
              reposToProcess = includeReposList.map(repoName => `${context.repo.owner}/${repoName}`);
            } else {
              console.log("Fetching all non-archived repositories for organization:", context.repo.owner);
              for await (const response of github.paginate.iterator(github.rest.repos.listForOrg, {
                org: context.repo.owner, type: 'all', per_page: 100
              })) {
                for (const repo of response.data) {
                  if (!repo.archived) { reposToProcess.push(repo.full_name); }
                }
              }
              console.log(`Found ${reposToProcess.length} non-archived repositories in the organization.`);
            }
            
            const finalRepos = reposToProcess.filter(fullName => {
                const repoName = fullName.split('/')[1];
                return !excludeReposList.includes(repoName);
            });

            console.log(`Final list of ${finalRepos.length} repositories to process:`, finalRepos);
            core.setOutput('repo_list_json', JSON.stringify(finalRepos));
            core.setOutput('repo_count', finalRepos.length);
            
            await core.summary
              .addHeading('Repository Discovery Phase')
              .addRaw(`Discovered <strong>${finalRepos.length}</strong> repositories to process based on include/exclude rules.`)
              .addSeparator().write();

  process_repositories:
    name: Process Repository (${{ matrix.repository_full_name }})
    needs: [discover_repositories] # Does not need a separate build job anymore
    if: needs.discover_repositories.outputs.repository_count > 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository_full_name: ${{ fromJson(needs.discover_repositories.outputs.repositories_json) }}
      fail-fast: false
    
    steps:
      - name: Checkout .github repo (for our management scripts)
        uses: actions/checkout@v4.1.1
        # This checks out the content of THIS .github repository.

      - name: Checkout licensee source code
        uses: actions/checkout@v4.1.1
        with:
          repository: licensee/licensee # The official licensee repository
          path: licensee-src          # Checkout to a subdirectory to avoid conflicts
          # Use the version tag from workflow_dispatch input or a default.
          ref: ${{ github.event.inputs.licensee_version_tag || 'v9.16.1' }} 
          # Pin to a specific tag of licensee for stability (e.g., 'v9.16.1')

      - name: Build licensee Docker image locally
        run: |
          echo "Building licensee Docker image (${{ env.LOCAL_LICENSEE_IMAGE_TAG }}) from ref: ${{ github.event.inputs.licensee_version_tag || 'v9.16.1' }}"
          docker build ./licensee-src --tag ${{ env.LOCAL_LICENSEE_IMAGE_TAG }}
          echo "Successfully built Docker image: ${{ env.LOCAL_LICENSEE_IMAGE_TAG }}"
          # Verify image exists locally
          docker images ${{ env.LOCAL_LICENSEE_IMAGE_TAG }}

      - name: DEBUG - Test ORG_PAT Access to ${{ matrix.repository_full_name }}
        if: matrix.repository_full_name == 'vmware/test-cla-gpl2' # Only run for one repo for testing
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const repoFullName = '${{ matrix.repository_full_name }}';
            const owner = repoFullName.split('/')[0];
            const repo = repoFullName.split('/')[1];
            core.info(`Attempting to get repo details for ${repoFullName} using ORG_PAT.`);
            try {
              const { data: repoData } = await github.rest.repos.get({ owner, repo });
              core.info(`Successfully fetched repo data: ${JSON.stringify(repoData.name)}`);
              
              core.info(`Attempting to get root contents for ${repoFullName}`);
              const { data: contents } = await github.rest.repos.getContent({ owner, repo, path: '' });
              core.info(`Successfully fetched root contents. Number of items: ${contents.length}`);

              // Attempt a "safe" write-like check, e.g., trying to get a specific workflow file,
              // or even just trying to create a dummy branch (which requires write access).
              // For now, just reading content which `ORG_PAT` *should* be able to do.
              // The Python script is failing on a repo.create_file() call.
            } catch (error) {
              core.setFailed(`ORG_PAT test failed for ${repoFullName}: ${error.message}`);
              core.error(JSON.stringify(error)); // Log the full error object
            }
            
      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install PyGithub==1.59.1

      - name: Check license and manage CLA stub for ${{ matrix.repository_full_name }}
        id: manage_stub_step
        run: python .github/scripts/check_and_install_stub.py
        env:
          TARGET_REPO_FULL_NAME: ${{ matrix.repository_full_name }}
          ORG_PAT: ${{ secrets.ORG_PAT }}
          PERMISSIVE_SPDX_IDS: ${{ env.PERMISSIVE_SPDX_IDS_CSV }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          # Pass the locally built image tag to the Python script.
          LICENSEE_DOCKER_IMAGE: ${{ env.LOCAL_LICENSEE_IMAGE_TAG }}
          
      - name: Record action for ${{ matrix.repository_full_name }} to Job Summary
        if: always() # Run even if previous steps fail, to capture status.
        run: |
          echo "Debug: manage_stub_step stdout was: [${{ steps.manage_stub_step.outputs.stdout }}]"
          echo "Debug: manage_stub_step outcome was: [${{ steps.manage_stub_step.outcome }}]"

          # Attempt to parse the status from stdout if available
          # Initialize FINAL_STATUS to reflect the outcome if stdout parsing fails
          FINAL_STATUS="status_unknown_due_to_step_failure"
          if [[ "${{ steps.manage_stub_step.outcome }}" == "success" ]]; then
            FINAL_STATUS="success_script_did_not_error" # Default if successful but no specific status
          fi

          # Try to get the more specific status if stdout is available
          # Use a temporary variable to avoid issues if grep finds nothing
          PYTHON_STDOUT_CAPTURE="${{ steps.manage_stub_step.outputs.stdout }}"
          STATUS_LINE=$(echo "${PYTHON_STDOUT_CAPTURE}" | grep REPO_PROCESSED_STATUS= || true) # Prevent grep from failing the line if no match

          if [[ -n "${STATUS_LINE}" ]]; then # If STATUS_LINE is not empty
            PARSED_STATUS=${STATUS_LINE#*=}
            if [[ -n "${PARSED_STATUS}" ]]; then # If PARSED_STATUS is not empty after extraction
              FINAL_STATUS="${PARSED_STATUS}"
            fi
          elif [[ "${{ steps.manage_stub_step.outcome }}" == "failure" ]]; then
             FINAL_STATUS="script_failed_see_logs" # If script failed and we couldn't parse specific status
          fi

          ICON="ℹ️ Unknown" # Default icon
          if [[ "${{ steps.manage_stub_step.outcome }}" == "failure" ]]; then
            ICON="❌ Error"
          elif [[ "${{ steps.manage_stub_step.outcome }}" == "success" ]]; then
            # If successful, refine icon based on parsed status
            if [[ "${FINAL_STATUS}" == "skipped_"* ]]; then ICON="⚪ Skipped";
            elif [[ "${FINAL_STATUS}" == *"updated"* || "${FINAL_STATUS}" == *"created"* || "${FINAL_STATUS}" == *"removed"* ]]; then ICON="📝 Action";
            elif [[ "${FINAL_STATUS}" == "success_script_did_not_error" || "${FINAL_STATUS}" == "skipped_stub_up_to_date" || "${FINAL_STATUS}" == "skipped_permissive_no_stub" ]]; then ICON="✅ Success/NoOp";
            else ICON="✅ Success (Status: ${FINAL_STATUS})"; fi # Catch other success statuses
          fi
          
          echo "#### ${{ matrix.repository_full_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Parsed Status: ${FINAL_STATUS}" >> $GITHUB_STEP_SUMMARY # Use the determined FINAL_STATUS
          echo "- Step Outcome: ${ICON} (${{ steps.manage_stub_step.outcome }})" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

  summarize_run:
    name: Final Run Summary
    if: always()
    needs: [discover_repositories, process_repositories] # Removed build_licensee_image from needs here
    runs-on: ubuntu-latest
    steps:
      - name: Create final summary of the run
        run: |
          echo "### CLA Stub Management Full Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Repositories Discovered for Processing: **${{ needs.discover_repositories.outputs.repository_count || 0 }}**" >> $GITHUB_STEP_SUMMARY
          # No separate build job status to report now, as it's part of each matrix job.
          # You could infer overall build success if all matrix jobs succeeded, but that's indirect.
          
          RESULT_MSG="ℹ️ **Overall Repository Processing Result:** Status - ${{ needs.process_repositories.result }}."
          if [[ "${{ needs.process_repositories.result }}" == "failure" ]]; then
            RESULT_MSG="⚠️ **Overall Repository Processing Result:** At least one repository failed processing. This could be due to image build, license check, or API errors."
          elif [[ "${{ needs.process_repositories.result }}" == "success" ]]; then
            RESULT_MSG="✅ **Overall Repository Processing Result:** All processed repositories completed without error."
          elif [[ "${{ needs.process_repositories.result }}" == "skipped" ]]; then
            RESULT_MSG="⚪ **Overall Repository Processing Result:** Processing job was skipped."
          fi
          echo "$RESULT_MSG Check individual 'Process Repository' job logs and their summaries for details." >> $GITHUB_STEP_SUMMARY
