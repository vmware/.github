# File: .github/.github/workflows/manage-cla-stubs.yml
# Purpose: Periodically manages CLA trigger stubs across organization repositories.

name: Manage CLA Stubs Org-Wide

on:
  #schedule:
    #- cron: '0 3 * * *' # Daily at 3 AM UTC
  workflow_dispatch:
    inputs:
      specific_repos:
        description: 'Comma-separated list of specific repos (owner/repo1,owner/repo2) to process. Overrides INCLUDE/EXCLUDE.'
        required: false
        default: ''

permissions: {} # Keep top-level permissions minimal; ORG_PAT provides necessary permissions.

env:
  EXCLUDE_REPOS_CSV: ${{ vars.EXCLUDE_REPOS || '.github' }}
  INCLUDE_REPOS_CSV: ${{ vars.INCLUDE_REPOS || '' }}
  PERMISSIVE_SPDX_IDS_CSV: ${{ vars.PERMISSIVE_SPDX_IDS || 'MIT,Apache-2.0,BSD-3-Clause,ISC,BSD-2-Clause,CC0-1.0,Unlicense' }}
  # Optional: If you want to configure the CLA document URL used in stubs from here.
  # The Python script check_and_install_stub.py needs to be updated to use this if provided.
  # CLA_DOCUMENT_URL_FOR_STUBS_ENV_VAR: ${{ vars.CLA_DOCUMENT_URL_FOR_STUBS || '' }}

jobs:
  discover_repositories:
    name: Discover Repositories
    runs-on: ubuntu-latest
    outputs:
      repositories_json: ${{ steps.get_repos.outputs.repo_list_json }}
      repository_count: ${{ steps.get_repos.outputs.repo_count }}
    steps:
      - name: Get Organization Repositories List
        id: get_repos
        uses: actions/github-script@v7.0.1 # Pin to specific version
        env:
          INCLUDE_REPOS_CSV: ${{ env.INCLUDE_REPOS_CSV }}
          EXCLUDE_REPOS_CSV: ${{ env.EXCLUDE_REPOS_CSV }}
          SPECIFIC_REPOS_INPUT: ${{ github.event.inputs.specific_repos }}
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const includeReposList = (process.env.INCLUDE_REPOS_CSV || "").split(',').map(r => r.trim()).filter(r => r);
            const excludeReposList = (process.env.EXCLUDE_REPOS_CSV || "").split(',').map(r => r.trim()).filter(r => r);
            const specificReposInput = (process.env.SPECIFIC_REPOS_INPUT || "").split(',').map(r => r.trim()).filter(r => r);
            let reposToProcess = [];

            if (specificReposInput.length > 0) {
              console.log("Processing only specifically provided repositories:", specificReposInput);
              reposToProcess = specificReposInput.map(repoName => {
                if (repoName.includes('/')) return repoName;
                return `${context.repo.owner}/${repoName}`;
              });
            } else if (includeReposList.length > 0) {
              console.log("Processing only explicitly included repositories (from VARS_INCLUDE_REPOS):", includeReposList);
              reposToProcess = includeReposList.map(repoName => `${context.repo.owner}/${repoName}`);
            } else {
              console.log("Fetching all non-archived repositories for organization:", context.repo.owner);
              for await (const response of github.paginate.iterator(github.rest.repos.listForOrg, {
                org: context.repo.owner, type: 'all', per_page: 100
              })) {
                for (const repo of response.data) {
                  if (!repo.archived) { reposToProcess.push(repo.full_name); }
                }
              }
              console.log(`Found ${reposToProcess.length} non-archived repositories.`);
            }
            
            const finalRepos = reposToProcess.filter(fullName => {
                const repoName = fullName.split('/')[1];
                return !excludeReposList.includes(repoName);
            });

            console.log(`Final list of ${finalRepos.length} repositories to process:`, finalRepos);
            core.setOutput('repo_list_json', JSON.stringify(finalRepos));
            core.setOutput('repo_count', finalRepos.length);
            
            await core.summary
              .addHeading('Repository Discovery Phase')
              .addRaw(`Discovered <strong>${finalRepos.length}</strong> repositories to process.`)
              .addSeparator().write();

  process_repositories:
    name: Process Repository (${{ matrix.repository_full_name }})
    needs: discover_repositories
    if: needs.discover_repositories.outputs.repository_count > 0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repository_full_name: ${{ fromJson(needs.discover_repositories.outputs.repositories_json) }}
      fail-fast: false
    
    steps:
      - name: Checkout .github repo (for scripts)
        uses: actions/checkout@v4.1.1

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install PyGithub==1.59.1 # Pin PyGithub version

      - name: Check license and manage CLA stub for ${{ matrix.repository_full_name }}
        id: manage_stub_step
        run: python .github/scripts/check_and_install_stub.py
        env:
          TARGET_REPO_FULL_NAME: ${{ matrix.repository_full_name }}
          ORG_PAT: ${{ secrets.ORG_PAT }}
          PERMISSIVE_SPDX_IDS: ${{ env.PERMISSIVE_SPDX_IDS_CSV }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          # CLA_DOCUMENT_URL_FOR_STUBS: ${{ env.CLA_DOCUMENT_URL_FOR_STUBS_ENV_VAR }} # Pass if Python script uses it

      - name: Record action for ${{ matrix.repository_full_name }} to Job Summary
        if: always()
        run: |
          STATUS_OUTPUT=$(echo "${{ steps.manage_stub_step.outputs.stdout }}" | grep REPO_PROCESSED_STATUS=)
          FINAL_STATUS=${STATUS_OUTPUT#*=}
          ICON="✅"
          if [[ "${{ steps.manage_stub_step.outcome }}" == "failure" ]]; then ICON="❌ Error";
          elif [[ "${FINAL_STATUS}" == "skipped_"* ]]; then ICON="⚪ Skipped";
          elif [[ "${FINAL_STATUS}" == *"updated"* || "${FINAL_STATUS}" == *"created"* || "${FINAL_STATUS}" == *"removed"* ]]; then ICON="📝 Action"; fi
          
          echo "#### ${{ matrix.repository_full_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${FINAL_STATUS:-'unknown_script_output'}" >> $GITHUB_STEP_SUMMARY
          echo "- Result: ${ICON} (${{ steps.manage_stub_step.outcome }})" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

  summarize_run:
    name: Final Run Summary
    if: always()
    needs: [discover_repositories, process_repositories]
    runs-on: ubuntu-latest
    steps:
      - name: Create final summary of the run
        run: |
          echo "### CLA Stub Management Full Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Total Repositories Discovered for Processing: **${{ needs.discover_repositories.outputs.repository_count || 0 }}**" >> $GITHUB_STEP_SUMMARY
          RESULT_MSG="ℹ️ **Overall Result:** Processing status - ${{ needs.process_repositories.result }}."
          if [[ "${{ needs.process_repositories.result }}" == "failure" ]]; then
            RESULT_MSG="⚠️ **Overall Result:** At least one repository failed processing."
          elif [[ "${{ needs.process_repositories.result }}" == "success" ]]; then
            RESULT_MSG="✅ **Overall Result:** All processed repositories completed without error."
          elif [[ "${{ needs.process_repositories.result }}" == "skipped" ]]; then
            RESULT_MSG="⚪ **Overall Result:** Processing job was skipped."
          fi
          echo "$RESULT_MSG Check individual 'Process Repository' job logs for details." >> $GITHUB_STEP_SUMMARY
          
